/*------------------------------------------------------------
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░▓▓▓▓▓▓░░░▓▓▓▓▓▓░░░▓▓▓▓▓▓░░▓▓▓▓▓▓░░░░░░░░░░░░░░░░
░░░░░░░░░░░░▓▓░░░░░░░░▓▓░░░░▓▓░░░░▓▓░░░░▓▓░░░░▓▓░░░░░░░░░░░░░░
░░░░░░░░░░░░▓▓░░▓▓▓▓░░▓▓▓▓▓▓░░░░░░▓▓░░░░▓▓░░░░▓▓░░░░░░░░░░░░░░
░░░░░░░░░░░░▓▓░░░░▓▓░░▓▓░░░░▓▓░░░░▓▓░░░░▓▓░░░░▓▓░░░░░░░░░░░░░░
░░░░░░░░░░░░░░▓▓▓▓▓▓░░▓▓░░░░▓▓░░▓▓▓▓▓▓░░▓▓▓▓▓▓░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

Grid is a library created by Levi Beach (http://levibeach.com)
Based on a system by Hugo Giraudel (https://github.com/HugoGiraudel)
It relies on `calc()` (http://caniuse.com/#search=calc)
and advanced CSS selectors (http://caniuse.com/#feat=css-sel3).

Expect it to work on IE9+, Android 4.4+ and modern browsers
------------------------------------------------------------*/

// Grid configuration
$grid-gutters: 10px !default;
$grid-columns: 12 !default;
$grid-children: 'div' !default;

// Need to make sure that we are dealing with bordered-box sizing
// otherwise things will get crazy.
%grid-bb {
  box-sizing: border-box;
}

// Include one of these on the grid's parent element/wrapper
@mixin grid-container {
  overflow: hidden;
}

@mixin grid-clearfix {
  *zoom: 1;
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

/*------------------------------------------------------------
EXAMPLE:
.grid-container-element {
  $grid-children: '.grid-column-element' !global;
  @include grid-container();
  @include grid(1, 2, 4, 5);
}
.grid-column-element {
  ...
}

The above styles will result in a .grid-container-element which
has 4 columns and the layout will be something like this:

| 1 |  2  |    4    |     5     |

------------------------------------------------------------*/
@mixin grid($cols...) {

  // Set styles for the child element
  &> #{$grid-children} {
    @extend %grid-bb;
    float: left;
    margin-right: $grid-gutters;

    // Setting columns
    @for $i from 1 through length($cols) {
      &:nth-of-type(#{length($cols)}n + #{$i}) {
        $multiplier: #{nth($cols, $i)} / $grid-columns;
        width: calc(100% * #{$multiplier} - #{$grid-gutters} * (1 - #{$multiplier}));
      }
    }
    // Clear the right margin on last element from each row
    &:nth-of-type(#{length($cols)}n + #{length($cols)}) {
      margin-right: 0;
    }
  }
}

// For those moments when you just need to align an element to the grid...
@mixin grid-col($cols) {
  @extend %grid-bb;
  $multiplier: $cols / $grid-columns;
  float: left;
  margin-right: $grid-gutters;
  width: calc(100% * #{$multiplier} - #{$grid-gutters} * (1 - #{$multiplier}));
}

// For when you need to clear the margin on the last element of a row
// Primarily for use with grid-col(); but could be used wherever
// you don't want to have a rigth margin.
@mixin grid-col-omega() {
  margin-right: 0;
}
